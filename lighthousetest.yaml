esphome:
  name: lighthousetest
  friendly_name: LighthouseTest
  on_boot:
    then:
      - light.turn_on:
          id: my_light
          brightness: 50%              
  on_loop:
    then:
      - stepper.report_position:
          id: image_rotation_stepper
          position: 0
esp8266:
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "Gf18TbhvtiKvveHM5eHK+MM6Nf+oHK8rMgVO3pmOTN8="

ota:
  password: "cbb4e8109e82496ed59606906eb25177"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Lighthousetest Fallback Hotspot"
    password: "OCe2AJLc2AZy"

captive_portal:
globals:
  - id: motor_running
    type: bool
    restore_value: yes
    initial_value: 'true'

switch:
  - platform: template
    name: "Rotation"
    id: rotation_switch
    icon: "mdi:rotate-360"
    restore_mode: RESTORE_DEFAULT_ON 
    lambda: |-
      if (id(motor_running)) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      - script.execute: start_motor      
    turn_off_action:
      - script.execute: stop_motor

# Example configuration entry
stepper:
  - platform: a4988
    id: image_rotation_stepper
    step_pin: 1
    dir_pin:
      number: 2
      inverted: false
    sleep_pin: 0
    max_speed: 500 steps/s  

script:
  - id: start_motor
    then:
      - lambda: 'id(motor_running) = true;'
      - stepper.set_target:
             id: image_rotation_stepper
             target: 1
  - id: stop_motor
    then:
      - lambda: 'id(motor_running) = false;'
      - stepper.set_target:
             id: image_rotation_stepper
             target: 0
  - id: toggle_motor
    then:
      - if:
          condition:
            lambda: 'return id(motor_running) == false;'
          then:
            - script.execute: start_motor
          else:
            - script.execute: stop_motor

light:
  - platform: neopixelbus
    id: my_light
    variant: SK6812
    pin: 3
    num_leds: 2
    type: RGBW
    name: "Lighthouse"
    on_turn_on:
      - light.turn_on: 
          id: my_light
          effect: "Bell Rock"     
    effects:
      - addressable_lambda:
          name: "Bell Rock"
          update_interval: 16ms
          lambda: |-
            // it.size() - Number of LEDs
            // it[num] - Access the LED at index num.
            // Set the LED at num to the given r, g, b, w values
            // it[num] = Color(r, g, b, w);
            // Get the color at index num (Color instance)
            // it[num].get();
            it[0] = Color(255, 0, 0, 0);  
            it[1] = Color(0, 0, 0, 255);     
      - addressable_lambda:
          name: "Police"
          update_interval: 16ms
          lambda: |-
            it[0] = Color(255, 0, 0, 0);  
            it[1] = Color(0, 0, 255, 0); 
      - addressable_lambda:
          name: "White Lighthouse"
          update_interval: 16ms
          lambda: |-
            it[0] = Color(0, 0, 0, 255);  
            it[1] = Color(0, 0, 0, 255);                               
      - addressable_scan:
          name: Scan
          move_interval: 1000ms
          scan_width: 1
      - flicker:
          name: Flicker
          alpha: 95%
          intensity: 1.5%          
      - addressable_twinkle:
          name: Twinkle
          twinkle_probability: 10%
          progress_interval: 4ms  
      - addressable_random_twinkle:
          name: Random Twinkle
          twinkle_probability: 5%
          progress_interval: 32ms                  
      - addressable_fireworks:
          name: Fireworks
          update_interval: 32ms
          spark_probability: 10%
          use_random_color: false
          fade_out_rate: 120     
      - addressable_color_wipe:
          name: Color Wipe
          colors:
            - red: 100%
              green: 100%
              blue: 100%
              num_leds: 2
            - red: 0%
              green: 0%
              blue: 0%
              num_leds: 2
          add_led_interval: 100ms
          reverse: false          
      - addressable_rainbow:
          name: Rainbow
          speed: 10
          width: 50     
      - strobe:
          name: Strobe
          colors:
            - state: true
              brightness: 100%
              red: 100%
              green: 90%
              blue: 0%
              duration: 500ms
            - state: false
              duration: 250ms
            - state: true
              brightness: 100%
              red: 0%
              green: 100%
              blue: 0%
              duration: 500ms           
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 100%
      - pulse:
          name: "Slow Pulse"
          # transition_length: 1s      # defaults to 1s
          update_interval: 2s     